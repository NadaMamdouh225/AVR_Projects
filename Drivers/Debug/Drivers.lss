
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000204e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000204e  000020c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c5c  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e23  00000000  00000000  00003d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007937  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000086e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000929f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <main>
      7a:	0c 94 25 10 	jmp	0x204a	; 0x204a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_vSetPinDir>:
#include "DIO_int.h"



void DIO_vSetPinDir(u8 A_u8PortNo , u8 A_u8PinNo ,u8 A_u8Dir)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Dir == DIO_OUTPUT)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_vSetPinDir+0x22>
     b56:	6f c0       	rjmp	.+222    	; 0xc36 <DIO_vSetPinDir+0x100>
	{
		switch(A_u8PortNo)
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	49 f1       	breq	.+82     	; 0xbbe <DIO_vSetPinDir+0x88>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <DIO_vSetPinDir+0x4a>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	61 f0       	breq	.+24     	; 0xb96 <DIO_vSetPinDir+0x60>
     b7e:	d2 c0       	rjmp	.+420    	; 0xd24 <DIO_vSetPinDir+0x1ee>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	71 f1       	breq	.+92     	; 0xbe6 <DIO_vSetPinDir+0xb0>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	e9 f1       	breq	.+122    	; 0xc0e <DIO_vSetPinDir+0xd8>
     b94:	c7 c0       	rjmp	.+398    	; 0xd24 <DIO_vSetPinDir+0x1ee>
			{
			case DIO_PORTA:
				SET_BIT(DDRA,A_u8PinNo);
     b96:	aa e3       	ldi	r26, 0x3A	; 58
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_vSetPinDir+0x7e>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_vSetPinDir+0x7a>
     bb8:	84 2b       	or	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	b3 c0       	rjmp	.+358    	; 0xd24 <DIO_vSetPinDir+0x1ee>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB,A_u8PinNo);
     bbe:	a7 e3       	ldi	r26, 0x37	; 55
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e3       	ldi	r30, 0x37	; 55
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_vSetPinDir+0xa6>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_vSetPinDir+0xa2>
     be0:	84 2b       	or	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	9f c0       	rjmp	.+318    	; 0xd24 <DIO_vSetPinDir+0x1ee>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC,A_u8PinNo);
     be6:	a4 e3       	ldi	r26, 0x34	; 52
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e4 e3       	ldi	r30, 0x34	; 52
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <DIO_vSetPinDir+0xce>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <DIO_vSetPinDir+0xca>
     c08:	84 2b       	or	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	8b c0       	rjmp	.+278    	; 0xd24 <DIO_vSetPinDir+0x1ee>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD,A_u8PinNo);
     c0e:	a1 e3       	ldi	r26, 0x31	; 49
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e1 e3       	ldi	r30, 0x31	; 49
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_vSetPinDir+0xf6>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <DIO_vSetPinDir+0xf2>
     c30:	84 2b       	or	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	77 c0       	rjmp	.+238    	; 0xd24 <DIO_vSetPinDir+0x1ee>
				break;
			}

	}
	else if (A_u8Dir == DIO_INPUT)
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	88 23       	and	r24, r24
     c3a:	09 f0       	breq	.+2      	; 0xc3e <DIO_vSetPinDir+0x108>
     c3c:	73 c0       	rjmp	.+230    	; 0xd24 <DIO_vSetPinDir+0x1ee>
	{
		switch(A_u8PortNo)
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	3d 83       	std	Y+5, r19	; 0x05
     c46:	2c 83       	std	Y+4, r18	; 0x04
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	91 05       	cpc	r25, r1
     c50:	59 f1       	breq	.+86     	; 0xca8 <DIO_vSetPinDir+0x172>
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	3d 81       	ldd	r19, Y+5	; 0x05
     c56:	22 30       	cpi	r18, 0x02	; 2
     c58:	31 05       	cpc	r19, r1
     c5a:	2c f4       	brge	.+10     	; 0xc66 <DIO_vSetPinDir+0x130>
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	69 f0       	breq	.+26     	; 0xc7e <DIO_vSetPinDir+0x148>
     c64:	5f c0       	rjmp	.+190    	; 0xd24 <DIO_vSetPinDir+0x1ee>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	89 f1       	breq	.+98     	; 0xcd2 <DIO_vSetPinDir+0x19c>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	91 05       	cpc	r25, r1
     c78:	09 f4       	brne	.+2      	; 0xc7c <DIO_vSetPinDir+0x146>
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <DIO_vSetPinDir+0x1c6>
     c7c:	53 c0       	rjmp	.+166    	; 0xd24 <DIO_vSetPinDir+0x1ee>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA,A_u8PinNo);
     c7e:	aa e3       	ldi	r26, 0x3A	; 58
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ea e3       	ldi	r30, 0x3A	; 58
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_vSetPinDir+0x166>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_vSetPinDir+0x162>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	3e c0       	rjmp	.+124    	; 0xd24 <DIO_vSetPinDir+0x1ee>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB,A_u8PinNo);
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 2e       	mov	r0, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_vSetPinDir+0x190>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_vSetPinDir+0x18c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	29 c0       	rjmp	.+82     	; 0xd24 <DIO_vSetPinDir+0x1ee>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC,A_u8PinNo);
     cd2:	a4 e3       	ldi	r26, 0x34	; 52
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e4 e3       	ldi	r30, 0x34	; 52
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_vSetPinDir+0x1ba>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_vSetPinDir+0x1b6>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	14 c0       	rjmp	.+40     	; 0xd24 <DIO_vSetPinDir+0x1ee>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD,A_u8PinNo);
     cfc:	a1 e3       	ldi	r26, 0x31	; 49
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e3       	ldi	r30, 0x31	; 49
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_vSetPinDir+0x1e4>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_vSetPinDir+0x1e0>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
				break;
			}
	}

}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <DIO_vSetPinVal>:
void DIO_vSetPinVal(u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8Val)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	27 97       	sbiw	r28, 0x07	; 7
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02
     d4e:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Val == DIO_HIGH)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	09 f0       	breq	.+2      	; 0xd58 <DIO_vSetPinVal+0x22>
     d56:	6f c0       	rjmp	.+222    	; 0xe36 <DIO_vSetPinVal+0x100>
		{
			switch(A_u8PortNo)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3f 83       	std	Y+7, r19	; 0x07
     d60:	2e 83       	std	Y+6, r18	; 0x06
     d62:	8e 81       	ldd	r24, Y+6	; 0x06
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	49 f1       	breq	.+82     	; 0xdbe <DIO_vSetPinVal+0x88>
     d6c:	2e 81       	ldd	r18, Y+6	; 0x06
     d6e:	3f 81       	ldd	r19, Y+7	; 0x07
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	2c f4       	brge	.+10     	; 0xd80 <DIO_vSetPinVal+0x4a>
     d76:	8e 81       	ldd	r24, Y+6	; 0x06
     d78:	9f 81       	ldd	r25, Y+7	; 0x07
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	61 f0       	breq	.+24     	; 0xd96 <DIO_vSetPinVal+0x60>
     d7e:	d2 c0       	rjmp	.+420    	; 0xf24 <DIO_vSetPinVal+0x1ee>
     d80:	2e 81       	ldd	r18, Y+6	; 0x06
     d82:	3f 81       	ldd	r19, Y+7	; 0x07
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	71 f1       	breq	.+92     	; 0xde6 <DIO_vSetPinVal+0xb0>
     d8a:	8e 81       	ldd	r24, Y+6	; 0x06
     d8c:	9f 81       	ldd	r25, Y+7	; 0x07
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	e9 f1       	breq	.+122    	; 0xe0e <DIO_vSetPinVal+0xd8>
     d94:	c7 c0       	rjmp	.+398    	; 0xf24 <DIO_vSetPinVal+0x1ee>
				{
				case DIO_PORTA:
					SET_BIT(PORTA,A_u8PinNo);
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_vSetPinVal+0x7e>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_vSetPinVal+0x7a>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	b3 c0       	rjmp	.+358    	; 0xf24 <DIO_vSetPinVal+0x1ee>
					break;
				case DIO_PORTB:
					SET_BIT(PORTB,A_u8PinNo);
     dbe:	a8 e3       	ldi	r26, 0x38	; 56
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e8 e3       	ldi	r30, 0x38	; 56
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_vSetPinVal+0xa6>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_vSetPinVal+0xa2>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	9f c0       	rjmp	.+318    	; 0xf24 <DIO_vSetPinVal+0x1ee>
					break;
				case DIO_PORTC:
					SET_BIT(PORTC,A_u8PinNo);
     de6:	a5 e3       	ldi	r26, 0x35	; 53
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e5 e3       	ldi	r30, 0x35	; 53
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_vSetPinVal+0xce>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_vSetPinVal+0xca>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	8b c0       	rjmp	.+278    	; 0xf24 <DIO_vSetPinVal+0x1ee>
					break;
				case DIO_PORTD:
					SET_BIT(PORTD,A_u8PinNo);
     e0e:	a2 e3       	ldi	r26, 0x32	; 50
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e2 e3       	ldi	r30, 0x32	; 50
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_vSetPinVal+0xf6>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_vSetPinVal+0xf2>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	77 c0       	rjmp	.+238    	; 0xf24 <DIO_vSetPinVal+0x1ee>
					break;
				}

		}
		else if (A_u8Val == DIO_LOW)
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	88 23       	and	r24, r24
     e3a:	09 f0       	breq	.+2      	; 0xe3e <DIO_vSetPinVal+0x108>
     e3c:	73 c0       	rjmp	.+230    	; 0xf24 <DIO_vSetPinVal+0x1ee>
		{
			switch(A_u8PortNo)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	3d 83       	std	Y+5, r19	; 0x05
     e46:	2c 83       	std	Y+4, r18	; 0x04
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	91 05       	cpc	r25, r1
     e50:	59 f1       	breq	.+86     	; 0xea8 <DIO_vSetPinVal+0x172>
     e52:	2c 81       	ldd	r18, Y+4	; 0x04
     e54:	3d 81       	ldd	r19, Y+5	; 0x05
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	2c f4       	brge	.+10     	; 0xe66 <DIO_vSetPinVal+0x130>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f0       	breq	.+26     	; 0xe7e <DIO_vSetPinVal+0x148>
     e64:	5f c0       	rjmp	.+190    	; 0xf24 <DIO_vSetPinVal+0x1ee>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	89 f1       	breq	.+98     	; 0xed2 <DIO_vSetPinVal+0x19c>
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	91 05       	cpc	r25, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <DIO_vSetPinVal+0x146>
     e7a:	40 c0       	rjmp	.+128    	; 0xefc <DIO_vSetPinVal+0x1c6>
     e7c:	53 c0       	rjmp	.+166    	; 0xf24 <DIO_vSetPinVal+0x1ee>
				{
				case DIO_PORTA:
					CLR_BIT(PORTA,A_u8PinNo);
     e7e:	ab e3       	ldi	r26, 0x3B	; 59
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_vSetPinVal+0x166>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_vSetPinVal+0x162>
     ea0:	80 95       	com	r24
     ea2:	84 23       	and	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	3e c0       	rjmp	.+124    	; 0xf24 <DIO_vSetPinVal+0x1ee>
					break;
				case DIO_PORTB:
					CLR_BIT(PORTB,A_u8PinNo);
     ea8:	a8 e3       	ldi	r26, 0x38	; 56
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e8 e3       	ldi	r30, 0x38	; 56
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_vSetPinVal+0x190>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_vSetPinVal+0x18c>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	29 c0       	rjmp	.+82     	; 0xf24 <DIO_vSetPinVal+0x1ee>
					break;
				case DIO_PORTC:
					CLR_BIT(PORTC,A_u8PinNo);
     ed2:	a5 e3       	ldi	r26, 0x35	; 53
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e5 e3       	ldi	r30, 0x35	; 53
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_vSetPinVal+0x1ba>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_vSetPinVal+0x1b6>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	14 c0       	rjmp	.+40     	; 0xf24 <DIO_vSetPinVal+0x1ee>
					break;
				case DIO_PORTD:
					CLR_BIT(PORTD,A_u8PinNo);
     efc:	a2 e3       	ldi	r26, 0x32	; 50
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e2 e3       	ldi	r30, 0x32	; 50
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_vSetPinVal+0x1e4>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_vSetPinVal+0x1e0>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
					break;
				}
		}

}
     f24:	27 96       	adiw	r28, 0x07	; 7
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <DIO_u8GetPinVal>:
u8   DIO_u8GetPinVal(u8 A_u8PortNo , u8 A_u8PinNo)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <DIO_u8GetPinVal+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_u8GetPinVal+0x8>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal = 0 ;
     f48:	19 82       	std	Y+1, r1	; 0x01

    switch(A_u8PortNo)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	3d 83       	std	Y+5, r19	; 0x05
     f52:	2c 83       	std	Y+4, r18	; 0x04
     f54:	4c 81       	ldd	r20, Y+4	; 0x04
     f56:	5d 81       	ldd	r21, Y+5	; 0x05
     f58:	41 30       	cpi	r20, 0x01	; 1
     f5a:	51 05       	cpc	r21, r1
     f5c:	41 f1       	breq	.+80     	; 0xfae <DIO_u8GetPinVal+0x78>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	91 05       	cpc	r25, r1
     f66:	34 f4       	brge	.+12     	; 0xf74 <DIO_u8GetPinVal+0x3e>
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	3d 81       	ldd	r19, Y+5	; 0x05
     f6c:	21 15       	cp	r18, r1
     f6e:	31 05       	cpc	r19, r1
     f70:	61 f0       	breq	.+24     	; 0xf8a <DIO_u8GetPinVal+0x54>
     f72:	52 c0       	rjmp	.+164    	; 0x1018 <DIO_u8GetPinVal+0xe2>
     f74:	4c 81       	ldd	r20, Y+4	; 0x04
     f76:	5d 81       	ldd	r21, Y+5	; 0x05
     f78:	42 30       	cpi	r20, 0x02	; 2
     f7a:	51 05       	cpc	r21, r1
     f7c:	51 f1       	breq	.+84     	; 0xfd2 <DIO_u8GetPinVal+0x9c>
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	83 30       	cpi	r24, 0x03	; 3
     f84:	91 05       	cpc	r25, r1
     f86:	b9 f1       	breq	.+110    	; 0xff6 <DIO_u8GetPinVal+0xc0>
     f88:	47 c0       	rjmp	.+142    	; 0x1018 <DIO_u8GetPinVal+0xe2>
    {
    case DIO_PORTA:
    	L_u8PinVal = GET_BIT(PINA,A_u8PinNo);
     f8a:	e9 e3       	ldi	r30, 0x39	; 57
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a9 01       	movw	r20, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_u8GetPinVal+0x6c>
     f9e:	55 95       	asr	r21
     fa0:	47 95       	ror	r20
     fa2:	8a 95       	dec	r24
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_u8GetPinVal+0x68>
     fa6:	ca 01       	movw	r24, r20
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	35 c0       	rjmp	.+106    	; 0x1018 <DIO_u8GetPinVal+0xe2>
        break;
    case DIO_PORTB:
    	L_u8PinVal = GET_BIT(PINB,A_u8PinNo);
     fae:	e6 e3       	ldi	r30, 0x36	; 54
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a9 01       	movw	r20, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_u8GetPinVal+0x90>
     fc2:	55 95       	asr	r21
     fc4:	47 95       	ror	r20
     fc6:	8a 95       	dec	r24
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_u8GetPinVal+0x8c>
     fca:	ca 01       	movw	r24, r20
     fcc:	81 70       	andi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	23 c0       	rjmp	.+70     	; 0x1018 <DIO_u8GetPinVal+0xe2>
        break;
    case DIO_PORTC:
    	L_u8PinVal = GET_BIT(PINC,A_u8PinNo);
     fd2:	e3 e3       	ldi	r30, 0x33	; 51
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a9 01       	movw	r20, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_u8GetPinVal+0xb4>
     fe6:	55 95       	asr	r21
     fe8:	47 95       	ror	r20
     fea:	8a 95       	dec	r24
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_u8GetPinVal+0xb0>
     fee:	ca 01       	movw	r24, r20
     ff0:	81 70       	andi	r24, 0x01	; 1
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	11 c0       	rjmp	.+34     	; 0x1018 <DIO_u8GetPinVal+0xe2>
        break;
    case DIO_PORTD:
    	L_u8PinVal = GET_BIT(PIND,A_u8PinNo);
     ff6:	e0 e3       	ldi	r30, 0x30	; 48
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a9 01       	movw	r20, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_u8GetPinVal+0xd8>
    100a:	55 95       	asr	r21
    100c:	47 95       	ror	r20
    100e:	8a 95       	dec	r24
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_u8GetPinVal+0xd4>
    1012:	ca 01       	movw	r24, r20
    1014:	81 70       	andi	r24, 0x01	; 1
    1016:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return L_u8PinVal;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <DIO_vSetPortDir>:
void DIO_vSetPortDir(u8 A_u8PortNo ,u8 A_u8Dir)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <DIO_vSetPortDir+0x6>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_vSetPortDir+0x8>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	6a 83       	std	Y+2, r22	; 0x02
		switch(A_u8PortNo)
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3c 83       	std	Y+4, r19	; 0x04
    1042:	2b 83       	std	Y+3, r18	; 0x03
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	91 05       	cpc	r25, r1
    104c:	d1 f0       	breq	.+52     	; 0x1082 <DIO_vSetPortDir+0x58>
    104e:	2b 81       	ldd	r18, Y+3	; 0x03
    1050:	3c 81       	ldd	r19, Y+4	; 0x04
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	2c f4       	brge	.+10     	; 0x1062 <DIO_vSetPortDir+0x38>
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	61 f0       	breq	.+24     	; 0x1078 <DIO_vSetPortDir+0x4e>
    1060:	1e c0       	rjmp	.+60     	; 0x109e <DIO_vSetPortDir+0x74>
    1062:	2b 81       	ldd	r18, Y+3	; 0x03
    1064:	3c 81       	ldd	r19, Y+4	; 0x04
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	81 f0       	breq	.+32     	; 0x108c <DIO_vSetPortDir+0x62>
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	81 f0       	breq	.+32     	; 0x1096 <DIO_vSetPortDir+0x6c>
    1076:	13 c0       	rjmp	.+38     	; 0x109e <DIO_vSetPortDir+0x74>
			{
			case DIO_PORTA:
				DDRA = A_u8Dir;
    1078:	ea e3       	ldi	r30, 0x3A	; 58
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	80 83       	st	Z, r24
    1080:	0e c0       	rjmp	.+28     	; 0x109e <DIO_vSetPortDir+0x74>
				break;
			case DIO_PORTB:
				DDRB = A_u8Dir;
    1082:	e7 e3       	ldi	r30, 0x37	; 55
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	80 83       	st	Z, r24
    108a:	09 c0       	rjmp	.+18     	; 0x109e <DIO_vSetPortDir+0x74>
				break;
			case DIO_PORTC:
				DDRC = A_u8Dir;
    108c:	e4 e3       	ldi	r30, 0x34	; 52
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	80 83       	st	Z, r24
    1094:	04 c0       	rjmp	.+8      	; 0x109e <DIO_vSetPortDir+0x74>
				break;
			case DIO_PORTD:
				DDRD = A_u8Dir;
    1096:	e1 e3       	ldi	r30, 0x31	; 49
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	80 83       	st	Z, r24
				break;
			}
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <DIO_vSetPortVal>:
void DIO_vSetPortVal(u8 A_u8PortNo ,u8 A_u8Val)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_vSetPortVal+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_vSetPortVal+0x8>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortNo)
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3c 83       	std	Y+4, r19	; 0x04
    10c4:	2b 83       	std	Y+3, r18	; 0x03
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	d1 f0       	breq	.+52     	; 0x1104 <DIO_vSetPortVal+0x58>
    10d0:	2b 81       	ldd	r18, Y+3	; 0x03
    10d2:	3c 81       	ldd	r19, Y+4	; 0x04
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	2c f4       	brge	.+10     	; 0x10e4 <DIO_vSetPortVal+0x38>
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	61 f0       	breq	.+24     	; 0x10fa <DIO_vSetPortVal+0x4e>
    10e2:	1e c0       	rjmp	.+60     	; 0x1120 <DIO_vSetPortVal+0x74>
    10e4:	2b 81       	ldd	r18, Y+3	; 0x03
    10e6:	3c 81       	ldd	r19, Y+4	; 0x04
    10e8:	22 30       	cpi	r18, 0x02	; 2
    10ea:	31 05       	cpc	r19, r1
    10ec:	81 f0       	breq	.+32     	; 0x110e <DIO_vSetPortVal+0x62>
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	91 05       	cpc	r25, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <DIO_vSetPortVal+0x6c>
    10f8:	13 c0       	rjmp	.+38     	; 0x1120 <DIO_vSetPortVal+0x74>
				{
				case DIO_PORTA:
					PORTA = A_u8Val;
    10fa:	eb e3       	ldi	r30, 0x3B	; 59
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	80 83       	st	Z, r24
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <DIO_vSetPortVal+0x74>
					break;
				case DIO_PORTB:
					PORTB = A_u8Val;
    1104:	e8 e3       	ldi	r30, 0x38	; 56
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <DIO_vSetPortVal+0x74>
					break;
				case DIO_PORTC:
					PORTC = A_u8Val;
    110e:	e5 e3       	ldi	r30, 0x35	; 53
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <DIO_vSetPortVal+0x74>
					break;
				case DIO_PORTD:
					PORTD = A_u8Val;
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
					break;
				}
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_u8GetPortVal>:
u8   DIO_u8GetPortVal(u8 A_u8PortNo)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_u8GetPortVal+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DIO_u8GetPortVal+0x8>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortVal = 0;
    113c:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortNo)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3c 83       	std	Y+4, r19	; 0x04
    1146:	2b 83       	std	Y+3, r18	; 0x03
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	d1 f0       	breq	.+52     	; 0x1186 <DIO_u8GetPortVal+0x58>
    1152:	2b 81       	ldd	r18, Y+3	; 0x03
    1154:	3c 81       	ldd	r19, Y+4	; 0x04
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <DIO_u8GetPortVal+0x38>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 f0       	breq	.+24     	; 0x117c <DIO_u8GetPortVal+0x4e>
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <DIO_u8GetPortVal+0x74>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <DIO_u8GetPortVal+0x62>
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	81 f0       	breq	.+32     	; 0x119a <DIO_u8GetPortVal+0x6c>
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <DIO_u8GetPortVal+0x74>
	{
	case DIO_PORTA:
		L_u8PortVal = PORTA;
    117c:	eb e3       	ldi	r30, 0x3B	; 59
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <DIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTB:
		L_u8PortVal = PORTB;
    1186:	e8 e3       	ldi	r30, 0x38	; 56
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <DIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTC:
		L_u8PortVal = PORTC;
    1190:	e5 e3       	ldi	r30, 0x35	; 53
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <DIO_u8GetPortVal+0x74>
		break;
	case DIO_PORTD:
		L_u8PortVal = PORTD;
    119a:	e2 e3       	ldi	r30, 0x32	; 50
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	return L_u8PortVal;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <MADC_vInit>:
#include "ADC_cfg.h"

#include <avr/io.h>

void MADC_vInit(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	/* Reference voltage selection */
	CLR_BIT(ADMUX,REFS1);        // 7
    11ba:	a7 e2       	ldi	r26, 0x27	; 39
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e7 e2       	ldi	r30, 0x27	; 39
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	8f 77       	andi	r24, 0x7F	; 127
    11c6:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);        // 6
    11c8:	a7 e2       	ldi	r26, 0x27	; 39
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e7 e2       	ldi	r30, 0x27	; 39
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	80 64       	ori	r24, 0x40	; 64
    11d4:	8c 93       	st	X, r24
	/* Data Adjustment direction */
	CLR_BIT(ADMUX,ADLAR);        // 5
    11d6:	a7 e2       	ldi	r26, 0x27	; 39
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e7 e2       	ldi	r30, 0x27	; 39
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 7d       	andi	r24, 0xDF	; 223
    11e2:	8c 93       	st	X, r24
	/* Select Prescaler Bits */
	ADCSRA =(ADCSRA & 0xF8) | (ADC_PRESCALER);
    11e4:	a6 e2       	ldi	r26, 0x26	; 38
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e6 e2       	ldi	r30, 0x26	; 38
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	88 7f       	andi	r24, 0xF8	; 248
    11f0:	82 60       	ori	r24, 0x02	; 2
    11f2:	8c 93       	st	X, r24
	/* Auto trigger enable */
	/* Select auto trigger source */
	CLR_BIT(ADCSRA,ADATE);
    11f4:	a6 e2       	ldi	r26, 0x26	; 38
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e6 e2       	ldi	r30, 0x26	; 38
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 7d       	andi	r24, 0xDF	; 223
    1200:	8c 93       	st	X, r24
	/* Interrupt enable / disable */
	CLR_BIT(ADCSRA,ADIE);
    1202:	a6 e2       	ldi	r26, 0x26	; 38
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e6 e2       	ldi	r30, 0x26	; 38
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	87 7f       	andi	r24, 0xF7	; 247
    120e:	8c 93       	st	X, r24
	/* Enable ADC peripheral */
	SET_BIT(ADCSRA,ADEN);
    1210:	a6 e2       	ldi	r26, 0x26	; 38
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e6 e2       	ldi	r30, 0x26	; 38
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	8c 93       	st	X, r24
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <MADC_u16AnalogRead>:
u16 MADC_u16AnalogRead(u8 A_u8ChannelNo)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	0f 92       	push	r0
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
	/* Select Channel*/
	ADMUX = (ADMUX & 0xE0) | (A_u8ChannelNo & 0x07);
    1230:	a7 e2       	ldi	r26, 0x27	; 39
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e7 e2       	ldi	r30, 0x27	; 39
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	98 2f       	mov	r25, r24
    123c:	90 7e       	andi	r25, 0xE0	; 224
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	87 70       	andi	r24, 0x07	; 7
    1242:	89 2b       	or	r24, r25
    1244:	8c 93       	st	X, r24
	/* Start Conversion */
	SET_BIT(ADCSRA,ADSC);
    1246:	a6 e2       	ldi	r26, 0x26	; 38
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e6 e2       	ldi	r30, 0x26	; 38
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	8c 93       	st	X, r24
	/* Poll on Flag  */
    while(GET_BIT(ADCSRA,ADIF) != 1){}
    1254:	e6 e2       	ldi	r30, 0x26	; 38
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	82 95       	swap	r24
    125c:	8f 70       	andi	r24, 0x0F	; 15
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	81 70       	andi	r24, 0x01	; 1
    1264:	90 70       	andi	r25, 0x00	; 0
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	a9 f3       	breq	.-22     	; 0x1254 <MADC_u16AnalogRead+0x30>
	/* Clear Flag */
    SET_BIT(ADCSRA,ADIF);
    126a:	a6 e2       	ldi	r26, 0x26	; 38
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e6 e2       	ldi	r30, 0x26	; 38
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 61       	ori	r24, 0x10	; 16
    1276:	8c 93       	st	X, r24
	/* Return ADC Data */
    return ADC;
    1278:	e4 e2       	ldi	r30, 0x24	; 36
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01


}
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <SSD_vInit>:


	};

void SSD_vInit(void)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDir(SSD_PORT,0xff);
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	6f ef       	ldi	r22, 0xFF	; 255
    1294:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_vSetPortDir>
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <SSD_vDisplayNum>:

void SSD_vDisplayNum(u8 A_u8Num)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	89 83       	std	Y+1, r24	; 0x01
	/* input validation*/
    if(A_u8Num < 10)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	8a 30       	cpi	r24, 0x0A	; 10
    12ae:	68 f4       	brcc	.+26     	; 0x12ca <SSD_vDisplayNum+0x2c>
    {
#if SSD_TYPE==COM_CATHODE
    	DIO_vSetPortVal(SSD_PORT, CGS_u8SSD_Nums[A_u8Num]);
#elif SSD_TYPE==COM_ANODE
    	DIO_vSetPortVal(SSD_PORT, ~CGS_u8SSD_Nums[A_u8Num]);
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	fc 01       	movw	r30, r24
    12b8:	e8 59       	subi	r30, 0x98	; 152
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 81       	ld	r24, Z
    12be:	98 2f       	mov	r25, r24
    12c0:	90 95       	com	r25
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	69 2f       	mov	r22, r25
    12c6:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_vSetPortVal>
#endif
    }
}
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <SSD_vTurnOff>:
void SSD_vTurnOff(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
#if SSD_TYPE==COM_CATHODE
  DIO_vSetPortVal(SSD_PORT,0x00);
#elif SSD_TYPE==COM_ANODE
  DIO_vSetPortVal(SSD_PORT,0xff);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	6f ef       	ldi	r22, 0xFF	; 255
    12de:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_vSetPortVal>
#endif
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <HLCD_vSendCommand>:
#include "LCD_int.h"



void HLCD_vSendCommand(u8 A_u8Cmd)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	6d 97       	sbiw	r28, 0x1d	; 29
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Control RS and RW pins */
	DIO_vSetPinVal(LCD_CTRL_PORT,LCD_RS_PIN,DIO_LOW);   //RS
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>
	DIO_vSetPinVal(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);   //RW
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>

	/* Write Command on the data pins */
	DIO_vSetPortVal(LCD_DATA_PORT,A_u8Cmd);
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1316:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_vSetPortVal>

	/* Pulse on the enable pin */
	DIO_vSetPinVal(LCD_CTRL_PORT,LCD_EN_PIN,DIO_HIGH);   //Enable
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	62 e0       	ldi	r22, 0x02	; 2
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a0 e8       	ldi	r26, 0x80	; 128
    132a:	bf e3       	ldi	r27, 0x3F	; 63
    132c:	89 8f       	std	Y+25, r24	; 0x19
    132e:	9a 8f       	std	Y+26, r25	; 0x1a
    1330:	ab 8f       	std	Y+27, r26	; 0x1b
    1332:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1334:	69 8d       	ldd	r22, Y+25	; 0x19
    1336:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	4a ef       	ldi	r20, 0xFA	; 250
    1342:	54 e4       	ldi	r21, 0x44	; 68
    1344:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	8d 8b       	std	Y+21, r24	; 0x15
    134e:	9e 8b       	std	Y+22, r25	; 0x16
    1350:	af 8b       	std	Y+23, r26	; 0x17
    1352:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1354:	6d 89       	ldd	r22, Y+21	; 0x15
    1356:	7e 89       	ldd	r23, Y+22	; 0x16
    1358:	8f 89       	ldd	r24, Y+23	; 0x17
    135a:	98 8d       	ldd	r25, Y+24	; 0x18
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	5f e3       	ldi	r21, 0x3F	; 63
    1364:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1368:	88 23       	and	r24, r24
    136a:	2c f4       	brge	.+10     	; 0x1376 <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9c 8b       	std	Y+20, r25	; 0x14
    1372:	8b 8b       	std	Y+19, r24	; 0x13
    1374:	3f c0       	rjmp	.+126    	; 0x13f4 <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    1376:	6d 89       	ldd	r22, Y+21	; 0x15
    1378:	7e 89       	ldd	r23, Y+22	; 0x16
    137a:	8f 89       	ldd	r24, Y+23	; 0x17
    137c:	98 8d       	ldd	r25, Y+24	; 0x18
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	3f ef       	ldi	r19, 0xFF	; 255
    1382:	4f e7       	ldi	r20, 0x7F	; 127
    1384:	57 e4       	ldi	r21, 0x47	; 71
    1386:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    138a:	18 16       	cp	r1, r24
    138c:	4c f5       	brge	.+82     	; 0x13e0 <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138e:	69 8d       	ldd	r22, Y+25	; 0x19
    1390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e2       	ldi	r20, 0x20	; 32
    139c:	51 e4       	ldi	r21, 0x41	; 65
    139e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9c 8b       	std	Y+20, r25	; 0x14
    13b4:	8b 8b       	std	Y+19, r24	; 0x13
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <HLCD_vSendCommand+0xee>
    13b8:	88 ec       	ldi	r24, 0xC8	; 200
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9a 8b       	std	Y+18, r25	; 0x12
    13be:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13c0:	89 89       	ldd	r24, Y+17	; 0x11
    13c2:	9a 89       	ldd	r25, Y+18	; 0x12
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <HLCD_vSendCommand+0xdc>
    13c8:	9a 8b       	std	Y+18, r25	; 0x12
    13ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	8b 89       	ldd	r24, Y+19	; 0x13
    13ce:	9c 89       	ldd	r25, Y+20	; 0x14
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	9c 8b       	std	Y+20, r25	; 0x14
    13d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d6:	8b 89       	ldd	r24, Y+19	; 0x13
    13d8:	9c 89       	ldd	r25, Y+20	; 0x14
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <HLCD_vSendCommand+0xd0>
    13de:	14 c0       	rjmp	.+40     	; 0x1408 <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e0:	6d 89       	ldd	r22, Y+21	; 0x15
    13e2:	7e 89       	ldd	r23, Y+22	; 0x16
    13e4:	8f 89       	ldd	r24, Y+23	; 0x17
    13e6:	98 8d       	ldd	r25, Y+24	; 0x18
    13e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9c 8b       	std	Y+20, r25	; 0x14
    13f2:	8b 8b       	std	Y+19, r24	; 0x13
    13f4:	8b 89       	ldd	r24, Y+19	; 0x13
    13f6:	9c 89       	ldd	r25, Y+20	; 0x14
    13f8:	98 8b       	std	Y+16, r25	; 0x10
    13fa:	8f 87       	std	Y+15, r24	; 0x0f
    13fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fe:	98 89       	ldd	r25, Y+16	; 0x10
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <HLCD_vSendCommand+0x118>
    1404:	98 8b       	std	Y+16, r25	; 0x10
    1406:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vSetPinVal(LCD_CTRL_PORT,LCD_EN_PIN,DIO_LOW);
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e8       	ldi	r26, 0x80	; 128
    1418:	bf e3       	ldi	r27, 0x3F	; 63
    141a:	8b 87       	std	Y+11, r24	; 0x0b
    141c:	9c 87       	std	Y+12, r25	; 0x0c
    141e:	ad 87       	std	Y+13, r26	; 0x0d
    1420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a ef       	ldi	r20, 0xFA	; 250
    1430:	54 e4       	ldi	r21, 0x44	; 68
    1432:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	a9 87       	std	Y+9, r26	; 0x09
    1440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <HLCD_vSendCommand+0x17c>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <HLCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <HLCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <HLCD_vSendCommand+0x1dc>
    14a6:	88 ec       	ldi	r24, 0xC8	; 200
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <HLCD_vSendCommand+0x1ca>
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <HLCD_vSendCommand+0x1be>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <HLCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <HLCD_vSendCommand+0x206>
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    14f6:	6d 96       	adiw	r28, 0x1d	; 29
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <HLCD_vSendData>:
void HLCD_vSendData(u8 A_u8Data)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	6d 97       	sbiw	r28, 0x1d	; 29
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Control RS and RW pins */
	DIO_vSetPinVal(LCD_CTRL_PORT,LCD_RS_PIN,DIO_HIGH);   //RS
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>
	DIO_vSetPinVal(LCD_CTRL_PORT,LCD_RW_PIN,DIO_LOW);    //RW
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	61 e0       	ldi	r22, 0x01	; 1
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>

	/* Write Data on the data pins */
	DIO_vSetPortVal(LCD_DATA_PORT,A_u8Data);
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1536:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_vSetPortVal>

	/* Pulse on the enable pin */
	DIO_vSetPinVal(LCD_CTRL_PORT,LCD_EN_PIN,DIO_HIGH);   //Enable
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	62 e0       	ldi	r22, 0x02	; 2
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e8       	ldi	r26, 0x80	; 128
    154a:	bf e3       	ldi	r27, 0x3F	; 63
    154c:	89 8f       	std	Y+25, r24	; 0x19
    154e:	9a 8f       	std	Y+26, r25	; 0x1a
    1550:	ab 8f       	std	Y+27, r26	; 0x1b
    1552:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1554:	69 8d       	ldd	r22, Y+25	; 0x19
    1556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    155a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a ef       	ldi	r20, 0xFA	; 250
    1562:	54 e4       	ldi	r21, 0x44	; 68
    1564:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	8d 8b       	std	Y+21, r24	; 0x15
    156e:	9e 8b       	std	Y+22, r25	; 0x16
    1570:	af 8b       	std	Y+23, r26	; 0x17
    1572:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1574:	6d 89       	ldd	r22, Y+21	; 0x15
    1576:	7e 89       	ldd	r23, Y+22	; 0x16
    1578:	8f 89       	ldd	r24, Y+23	; 0x17
    157a:	98 8d       	ldd	r25, Y+24	; 0x18
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1588:	88 23       	and	r24, r24
    158a:	2c f4       	brge	.+10     	; 0x1596 <HLCD_vSendData+0x8e>
		__ticks = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9c 8b       	std	Y+20, r25	; 0x14
    1592:	8b 8b       	std	Y+19, r24	; 0x13
    1594:	3f c0       	rjmp	.+126    	; 0x1614 <HLCD_vSendData+0x10c>
	else if (__tmp > 65535)
    1596:	6d 89       	ldd	r22, Y+21	; 0x15
    1598:	7e 89       	ldd	r23, Y+22	; 0x16
    159a:	8f 89       	ldd	r24, Y+23	; 0x17
    159c:	98 8d       	ldd	r25, Y+24	; 0x18
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	4f e7       	ldi	r20, 0x7F	; 127
    15a4:	57 e4       	ldi	r21, 0x47	; 71
    15a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15aa:	18 16       	cp	r1, r24
    15ac:	4c f5       	brge	.+82     	; 0x1600 <HLCD_vSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ae:	69 8d       	ldd	r22, Y+25	; 0x19
    15b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e2       	ldi	r20, 0x20	; 32
    15bc:	51 e4       	ldi	r21, 0x41	; 65
    15be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9c 8b       	std	Y+20, r25	; 0x14
    15d4:	8b 8b       	std	Y+19, r24	; 0x13
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <HLCD_vSendData+0xee>
    15d8:	88 ec       	ldi	r24, 0xC8	; 200
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9a 8b       	std	Y+18, r25	; 0x12
    15de:	89 8b       	std	Y+17, r24	; 0x11
    15e0:	89 89       	ldd	r24, Y+17	; 0x11
    15e2:	9a 89       	ldd	r25, Y+18	; 0x12
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <HLCD_vSendData+0xdc>
    15e8:	9a 8b       	std	Y+18, r25	; 0x12
    15ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ec:	8b 89       	ldd	r24, Y+19	; 0x13
    15ee:	9c 89       	ldd	r25, Y+20	; 0x14
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	9c 8b       	std	Y+20, r25	; 0x14
    15f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f6:	8b 89       	ldd	r24, Y+19	; 0x13
    15f8:	9c 89       	ldd	r25, Y+20	; 0x14
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	69 f7       	brne	.-38     	; 0x15d8 <HLCD_vSendData+0xd0>
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <HLCD_vSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1600:	6d 89       	ldd	r22, Y+21	; 0x15
    1602:	7e 89       	ldd	r23, Y+22	; 0x16
    1604:	8f 89       	ldd	r24, Y+23	; 0x17
    1606:	98 8d       	ldd	r25, Y+24	; 0x18
    1608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9c 8b       	std	Y+20, r25	; 0x14
    1612:	8b 8b       	std	Y+19, r24	; 0x13
    1614:	8b 89       	ldd	r24, Y+19	; 0x13
    1616:	9c 89       	ldd	r25, Y+20	; 0x14
    1618:	98 8b       	std	Y+16, r25	; 0x10
    161a:	8f 87       	std	Y+15, r24	; 0x0f
    161c:	8f 85       	ldd	r24, Y+15	; 0x0f
    161e:	98 89       	ldd	r25, Y+16	; 0x10
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <HLCD_vSendData+0x118>
    1624:	98 8b       	std	Y+16, r25	; 0x10
    1626:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vSetPinVal(LCD_CTRL_PORT,LCD_EN_PIN,DIO_LOW);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	62 e0       	ldi	r22, 0x02	; 2
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e8       	ldi	r26, 0x80	; 128
    1638:	bf e3       	ldi	r27, 0x3F	; 63
    163a:	8b 87       	std	Y+11, r24	; 0x0b
    163c:	9c 87       	std	Y+12, r25	; 0x0c
    163e:	ad 87       	std	Y+13, r26	; 0x0d
    1640:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	6b 85       	ldd	r22, Y+11	; 0x0b
    1644:	7c 85       	ldd	r23, Y+12	; 0x0c
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a ef       	ldi	r20, 0xFA	; 250
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8f 83       	std	Y+7, r24	; 0x07
    165c:	98 87       	std	Y+8, r25	; 0x08
    165e:	a9 87       	std	Y+9, r26	; 0x09
    1660:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <HLCD_vSendData+0x17c>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <HLCD_vSendData+0x1fa>
	else if (__tmp > 65535)
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <HLCD_vSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6b 85       	ldd	r22, Y+11	; 0x0b
    169e:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <HLCD_vSendData+0x1dc>
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9c 83       	std	Y+4, r25	; 0x04
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <HLCD_vSendData+0x1ca>
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <HLCD_vSendData+0x1be>
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <HLCD_vSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	6f 81       	ldd	r22, Y+7	; 0x07
    16f0:	78 85       	ldd	r23, Y+8	; 0x08
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	8d 83       	std	Y+5, r24	; 0x05
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <HLCD_vSendData+0x206>
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1716:	6d 96       	adiw	r28, 0x1d	; 29
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <HLCD_vInit>:

void HLCD_vInit(void)
{   /* Set pin direction */
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	c6 54       	subi	r28, 0x46	; 70
    1736:	d0 40       	sbci	r29, 0x00	; 0
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDir(LCD_CTRL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_CTRL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	41 e0       	ldi	r20, 0x01	; 1
    1752:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_CTRL_PORT,LCD_EN_PIN,DIO_OUTPUT);
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vSetPinDir>
	DIO_vSetPortDir(LCD_DATA_PORT,0xFF);
    1760:	83 e0       	ldi	r24, 0x03	; 3
    1762:	6f ef       	ldi	r22, 0xFF	; 255
    1764:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_vSetPortDir>
    1768:	fe 01       	movw	r30, r28
    176a:	ed 5b       	subi	r30, 0xBD	; 189
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a8 e4       	ldi	r26, 0x48	; 72
    1774:	b2 e4       	ldi	r27, 0x42	; 66
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	a2 83       	std	Z+2, r26	; 0x02
    177c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177e:	8e 01       	movw	r16, r28
    1780:	01 5c       	subi	r16, 0xC1	; 193
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	fe 01       	movw	r30, r28
    1786:	ed 5b       	subi	r30, 0xBD	; 189
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a ef       	ldi	r20, 0xFA	; 250
    1798:	54 e4       	ldi	r21, 0x44	; 68
    179a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	f8 01       	movw	r30, r16
    17a4:	80 83       	st	Z, r24
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	a2 83       	std	Z+2, r26	; 0x02
    17aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ac:	fe 01       	movw	r30, r28
    17ae:	ff 96       	adiw	r30, 0x3f	; 63
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	82 81       	ldd	r24, Z+2	; 0x02
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <HLCD_vInit+0xaa>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e af       	std	Y+62, r25	; 0x3e
    17ce:	8d af       	std	Y+61, r24	; 0x3d
    17d0:	46 c0       	rjmp	.+140    	; 0x185e <HLCD_vInit+0x136>
	else if (__tmp > 65535)
    17d2:	fe 01       	movw	r30, r28
    17d4:	ff 96       	adiw	r30, 0x3f	; 63
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	3f ef       	ldi	r19, 0xFF	; 255
    17e2:	4f e7       	ldi	r20, 0x7F	; 127
    17e4:	57 e4       	ldi	r21, 0x47	; 71
    17e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	64 f5       	brge	.+88     	; 0x1846 <HLCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	fe 01       	movw	r30, r28
    17f0:	ed 5b       	subi	r30, 0xBD	; 189
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9e af       	std	Y+62, r25	; 0x3e
    181a:	8d af       	std	Y+61, r24	; 0x3d
    181c:	0f c0       	rjmp	.+30     	; 0x183c <HLCD_vInit+0x114>
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9c af       	std	Y+60, r25	; 0x3c
    1824:	8b af       	std	Y+59, r24	; 0x3b
    1826:	8b ad       	ldd	r24, Y+59	; 0x3b
    1828:	9c ad       	ldd	r25, Y+60	; 0x3c
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <HLCD_vInit+0x102>
    182e:	9c af       	std	Y+60, r25	; 0x3c
    1830:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	8d ad       	ldd	r24, Y+61	; 0x3d
    1834:	9e ad       	ldd	r25, Y+62	; 0x3e
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	9e af       	std	Y+62, r25	; 0x3e
    183a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	8d ad       	ldd	r24, Y+61	; 0x3d
    183e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <HLCD_vInit+0xf6>
    1844:	16 c0       	rjmp	.+44     	; 0x1872 <HLCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	fe 01       	movw	r30, r28
    1848:	ff 96       	adiw	r30, 0x3f	; 63
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9e af       	std	Y+62, r25	; 0x3e
    185c:	8d af       	std	Y+61, r24	; 0x3d
    185e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1860:	9e ad       	ldd	r25, Y+62	; 0x3e
    1862:	9a af       	std	Y+58, r25	; 0x3a
    1864:	89 af       	std	Y+57, r24	; 0x39
    1866:	89 ad       	ldd	r24, Y+57	; 0x39
    1868:	9a ad       	ldd	r25, Y+58	; 0x3a
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <HLCD_vInit+0x142>
    186e:	9a af       	std	Y+58, r25	; 0x3a
    1870:	89 af       	std	Y+57, r24	; 0x39

	/* 8-bit Initialization sequence */
	_delay_ms(50);
	HLCD_vSendCommand(0x38);          // function set
    1872:	88 e3       	ldi	r24, 0x38	; 56
    1874:	0e 94 74 09 	call	0x12e8	; 0x12e8 <HLCD_vSendCommand>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e8       	ldi	r26, 0x80	; 128
    187e:	bf e3       	ldi	r27, 0x3F	; 63
    1880:	8d ab       	std	Y+53, r24	; 0x35
    1882:	9e ab       	std	Y+54, r25	; 0x36
    1884:	af ab       	std	Y+55, r26	; 0x37
    1886:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	6d a9       	ldd	r22, Y+53	; 0x35
    188a:	7e a9       	ldd	r23, Y+54	; 0x36
    188c:	8f a9       	ldd	r24, Y+55	; 0x37
    188e:	98 ad       	ldd	r25, Y+56	; 0x38
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	4a ef       	ldi	r20, 0xFA	; 250
    1896:	54 e4       	ldi	r21, 0x44	; 68
    1898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	89 ab       	std	Y+49, r24	; 0x31
    18a2:	9a ab       	std	Y+50, r25	; 0x32
    18a4:	ab ab       	std	Y+51, r26	; 0x33
    18a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18a8:	69 a9       	ldd	r22, Y+49	; 0x31
    18aa:	7a a9       	ldd	r23, Y+50	; 0x32
    18ac:	8b a9       	ldd	r24, Y+51	; 0x33
    18ae:	9c a9       	ldd	r25, Y+52	; 0x34
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e8       	ldi	r20, 0x80	; 128
    18b6:	5f e3       	ldi	r21, 0x3F	; 63
    18b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18bc:	88 23       	and	r24, r24
    18be:	2c f4       	brge	.+10     	; 0x18ca <HLCD_vInit+0x1a2>
		__ticks = 1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	98 ab       	std	Y+48, r25	; 0x30
    18c6:	8f a7       	std	Y+47, r24	; 0x2f
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <HLCD_vInit+0x220>
	else if (__tmp > 65535)
    18ca:	69 a9       	ldd	r22, Y+49	; 0x31
    18cc:	7a a9       	ldd	r23, Y+50	; 0x32
    18ce:	8b a9       	ldd	r24, Y+51	; 0x33
    18d0:	9c a9       	ldd	r25, Y+52	; 0x34
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	3f ef       	ldi	r19, 0xFF	; 255
    18d6:	4f e7       	ldi	r20, 0x7F	; 127
    18d8:	57 e4       	ldi	r21, 0x47	; 71
    18da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18de:	18 16       	cp	r1, r24
    18e0:	4c f5       	brge	.+82     	; 0x1934 <HLCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e2:	6d a9       	ldd	r22, Y+53	; 0x35
    18e4:	7e a9       	ldd	r23, Y+54	; 0x36
    18e6:	8f a9       	ldd	r24, Y+55	; 0x37
    18e8:	98 ad       	ldd	r25, Y+56	; 0x38
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	98 ab       	std	Y+48, r25	; 0x30
    1908:	8f a7       	std	Y+47, r24	; 0x2f
    190a:	0f c0       	rjmp	.+30     	; 0x192a <HLCD_vInit+0x202>
    190c:	88 ec       	ldi	r24, 0xC8	; 200
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9e a7       	std	Y+46, r25	; 0x2e
    1912:	8d a7       	std	Y+45, r24	; 0x2d
    1914:	8d a5       	ldd	r24, Y+45	; 0x2d
    1916:	9e a5       	ldd	r25, Y+46	; 0x2e
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <HLCD_vInit+0x1f0>
    191c:	9e a7       	std	Y+46, r25	; 0x2e
    191e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1920:	8f a5       	ldd	r24, Y+47	; 0x2f
    1922:	98 a9       	ldd	r25, Y+48	; 0x30
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	98 ab       	std	Y+48, r25	; 0x30
    1928:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192a:	8f a5       	ldd	r24, Y+47	; 0x2f
    192c:	98 a9       	ldd	r25, Y+48	; 0x30
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	69 f7       	brne	.-38     	; 0x190c <HLCD_vInit+0x1e4>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <HLCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	69 a9       	ldd	r22, Y+49	; 0x31
    1936:	7a a9       	ldd	r23, Y+50	; 0x32
    1938:	8b a9       	ldd	r24, Y+51	; 0x33
    193a:	9c a9       	ldd	r25, Y+52	; 0x34
    193c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	98 ab       	std	Y+48, r25	; 0x30
    1946:	8f a7       	std	Y+47, r24	; 0x2f
    1948:	8f a5       	ldd	r24, Y+47	; 0x2f
    194a:	98 a9       	ldd	r25, Y+48	; 0x30
    194c:	9c a7       	std	Y+44, r25	; 0x2c
    194e:	8b a7       	std	Y+43, r24	; 0x2b
    1950:	8b a5       	ldd	r24, Y+43	; 0x2b
    1952:	9c a5       	ldd	r25, Y+44	; 0x2c
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <HLCD_vInit+0x22c>
    1958:	9c a7       	std	Y+44, r25	; 0x2c
    195a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HLCD_vSendCommand(0x0C);          // display on/off control , Cursor and Blink cursor are off
    195c:	8c e0       	ldi	r24, 0x0C	; 12
    195e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <HLCD_vSendCommand>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 e8       	ldi	r26, 0x80	; 128
    1968:	bf e3       	ldi	r27, 0x3F	; 63
    196a:	8f a3       	std	Y+39, r24	; 0x27
    196c:	98 a7       	std	Y+40, r25	; 0x28
    196e:	a9 a7       	std	Y+41, r26	; 0x29
    1970:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1972:	6f a1       	ldd	r22, Y+39	; 0x27
    1974:	78 a5       	ldd	r23, Y+40	; 0x28
    1976:	89 a5       	ldd	r24, Y+41	; 0x29
    1978:	9a a5       	ldd	r25, Y+42	; 0x2a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a ef       	ldi	r20, 0xFA	; 250
    1980:	54 e4       	ldi	r21, 0x44	; 68
    1982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8b a3       	std	Y+35, r24	; 0x23
    198c:	9c a3       	std	Y+36, r25	; 0x24
    198e:	ad a3       	std	Y+37, r26	; 0x25
    1990:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1992:	6b a1       	ldd	r22, Y+35	; 0x23
    1994:	7c a1       	ldd	r23, Y+36	; 0x24
    1996:	8d a1       	ldd	r24, Y+37	; 0x25
    1998:	9e a1       	ldd	r25, Y+38	; 0x26
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <HLCD_vInit+0x28c>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9a a3       	std	Y+34, r25	; 0x22
    19b0:	89 a3       	std	Y+33, r24	; 0x21
    19b2:	3f c0       	rjmp	.+126    	; 0x1a32 <HLCD_vInit+0x30a>
	else if (__tmp > 65535)
    19b4:	6b a1       	ldd	r22, Y+35	; 0x23
    19b6:	7c a1       	ldd	r23, Y+36	; 0x24
    19b8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ba:	9e a1       	ldd	r25, Y+38	; 0x26
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	4c f5       	brge	.+82     	; 0x1a1e <HLCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	6f a1       	ldd	r22, Y+39	; 0x27
    19ce:	78 a5       	ldd	r23, Y+40	; 0x28
    19d0:	89 a5       	ldd	r24, Y+41	; 0x29
    19d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9a a3       	std	Y+34, r25	; 0x22
    19f2:	89 a3       	std	Y+33, r24	; 0x21
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <HLCD_vInit+0x2ec>
    19f6:	88 ec       	ldi	r24, 0xC8	; 200
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	98 a3       	std	Y+32, r25	; 0x20
    19fc:	8f 8f       	std	Y+31, r24	; 0x1f
    19fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a00:	98 a1       	ldd	r25, Y+32	; 0x20
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <HLCD_vInit+0x2da>
    1a06:	98 a3       	std	Y+32, r25	; 0x20
    1a08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	9a a3       	std	Y+34, r25	; 0x22
    1a12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	89 a1       	ldd	r24, Y+33	; 0x21
    1a16:	9a a1       	ldd	r25, Y+34	; 0x22
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f7       	brne	.-38     	; 0x19f6 <HLCD_vInit+0x2ce>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <HLCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a20:	7c a1       	ldd	r23, Y+36	; 0x24
    1a22:	8d a1       	ldd	r24, Y+37	; 0x25
    1a24:	9e a1       	ldd	r25, Y+38	; 0x26
    1a26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9a a3       	std	Y+34, r25	; 0x22
    1a30:	89 a3       	std	Y+33, r24	; 0x21
    1a32:	89 a1       	ldd	r24, Y+33	; 0x21
    1a34:	9a a1       	ldd	r25, Y+34	; 0x22
    1a36:	9e 8f       	std	Y+30, r25	; 0x1e
    1a38:	8d 8f       	std	Y+29, r24	; 0x1d
    1a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <HLCD_vInit+0x316>
    1a42:	9e 8f       	std	Y+30, r25	; 0x1e
    1a44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_vSendCommand(LCD_CLEAR);          // display clear
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	0e 94 74 09 	call	0x12e8	; 0x12e8 <HLCD_vSendCommand>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e4       	ldi	r27, 0x40	; 64
    1a54:	89 8f       	std	Y+25, r24	; 0x19
    1a56:	9a 8f       	std	Y+26, r25	; 0x1a
    1a58:	ab 8f       	std	Y+27, r26	; 0x1b
    1a5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a ef       	ldi	r20, 0xFA	; 250
    1a6a:	54 e4       	ldi	r21, 0x44	; 68
    1a6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8d 8b       	std	Y+21, r24	; 0x15
    1a76:	9e 8b       	std	Y+22, r25	; 0x16
    1a78:	af 8b       	std	Y+23, r26	; 0x17
    1a7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a80:	8f 89       	ldd	r24, Y+23	; 0x17
    1a82:	98 8d       	ldd	r25, Y+24	; 0x18
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <HLCD_vInit+0x376>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9c 8b       	std	Y+20, r25	; 0x14
    1a9a:	8b 8b       	std	Y+19, r24	; 0x13
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <HLCD_vInit+0x3f4>
	else if (__tmp > 65535)
    1a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	4c f5       	brge	.+82     	; 0x1b08 <HLCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <HLCD_vInit+0x3d6>
    1ae0:	88 ec       	ldi	r24, 0xC8	; 200
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9a 8b       	std	Y+18, r25	; 0x12
    1ae6:	89 8b       	std	Y+17, r24	; 0x11
    1ae8:	89 89       	ldd	r24, Y+17	; 0x11
    1aea:	9a 89       	ldd	r25, Y+18	; 0x12
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <HLCD_vInit+0x3c4>
    1af0:	9a 8b       	std	Y+18, r25	; 0x12
    1af2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	8b 89       	ldd	r24, Y+19	; 0x13
    1af6:	9c 89       	ldd	r25, Y+20	; 0x14
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	69 f7       	brne	.-38     	; 0x1ae0 <HLCD_vInit+0x3b8>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <HLCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9c 8b       	std	Y+20, r25	; 0x14
    1b1a:	8b 8b       	std	Y+19, r24	; 0x13
    1b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b20:	98 8b       	std	Y+16, r25	; 0x10
    1b22:	8f 87       	std	Y+15, r24	; 0x0f
    1b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b26:	98 89       	ldd	r25, Y+16	; 0x10
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <HLCD_vInit+0x400>
    1b2c:	98 8b       	std	Y+16, r25	; 0x10
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HLCD_vSendCommand(0x06);          // enter mode set
    1b30:	86 e0       	ldi	r24, 0x06	; 6
    1b32:	0e 94 74 09 	call	0x12e8	; 0x12e8 <HLCD_vSendCommand>
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	a0 e8       	ldi	r26, 0x80	; 128
    1b3c:	bf e3       	ldi	r27, 0x3F	; 63
    1b3e:	8b 87       	std	Y+11, r24	; 0x0b
    1b40:	9c 87       	std	Y+12, r25	; 0x0c
    1b42:	ad 87       	std	Y+13, r26	; 0x0d
    1b44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	4a ef       	ldi	r20, 0xFA	; 250
    1b54:	54 e4       	ldi	r21, 0x44	; 68
    1b56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	8f 83       	std	Y+7, r24	; 0x07
    1b60:	98 87       	std	Y+8, r25	; 0x08
    1b62:	a9 87       	std	Y+9, r26	; 0x09
    1b64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e8       	ldi	r20, 0x80	; 128
    1b74:	5f e3       	ldi	r21, 0x3F	; 63
    1b76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b7a:	88 23       	and	r24, r24
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <HLCD_vInit+0x460>
		__ticks = 1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	3f c0       	rjmp	.+126    	; 0x1c06 <HLCD_vInit+0x4de>
	else if (__tmp > 65535)
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	3f ef       	ldi	r19, 0xFF	; 255
    1b94:	4f e7       	ldi	r20, 0x7F	; 127
    1b96:	57 e4       	ldi	r21, 0x47	; 71
    1b98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b9c:	18 16       	cp	r1, r24
    1b9e:	4c f5       	brge	.+82     	; 0x1bf2 <HLCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e2       	ldi	r20, 0x20	; 32
    1bae:	51 e4       	ldi	r21, 0x41	; 65
    1bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
    1bc8:	0f c0       	rjmp	.+30     	; 0x1be8 <HLCD_vInit+0x4c0>
    1bca:	88 ec       	ldi	r24, 0xC8	; 200
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	9c 83       	std	Y+4, r25	; 0x04
    1bd0:	8b 83       	std	Y+3, r24	; 0x03
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <HLCD_vInit+0x4ae>
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	69 f7       	brne	.-38     	; 0x1bca <HLCD_vInit+0x4a2>
    1bf0:	14 c0       	rjmp	.+40     	; 0x1c1a <HLCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf4:	78 85       	ldd	r23, Y+8	; 0x08
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	9e 83       	std	Y+6, r25	; 0x06
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <HLCD_vInit+0x4ea>
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1c1a:	ca 5b       	subi	r28, 0xBA	; 186
    1c1c:	df 4f       	sbci	r29, 0xFF	; 255
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	08 95       	ret

00001c32 <HLCD_vPrintString>:

void HLCD_vPrintString(char A_s8String[])
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <HLCD_vPrintString+0x6>
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 L_u8String = 0;A_s8String[L_u8String] != '\0' ;L_u8String++)
    1c42:	19 82       	std	Y+1, r1	; 0x01
    1c44:	0e c0       	rjmp	.+28     	; 0x1c62 <HLCD_vPrintString+0x30>
	{
		HLCD_vSendData(A_s8String[L_u8String]);
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c50:	fc 01       	movw	r30, r24
    1c52:	e2 0f       	add	r30, r18
    1c54:	f3 1f       	adc	r31, r19
    1c56:	80 81       	ld	r24, Z
    1c58:	0e 94 84 0a 	call	0x1508	; 0x1508 <HLCD_vSendData>
	_delay_ms(1);
}

void HLCD_vPrintString(char A_s8String[])
{
	for(u8 L_u8String = 0;A_s8String[L_u8String] != '\0' ;L_u8String++)
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e2 0f       	add	r30, r18
    1c70:	f3 1f       	adc	r31, r19
    1c72:	80 81       	ld	r24, Z
    1c74:	88 23       	and	r24, r24
    1c76:	39 f7       	brne	.-50     	; 0x1c46 <HLCD_vPrintString+0x14>
	{
		HLCD_vSendData(A_s8String[L_u8String]);
	}

}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <HLCD_vPrintNumber>:
void HLCD_vPrintNumber(s32 A_s32Number)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	28 97       	sbiw	r28, 0x08	; 8
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	6d 83       	std	Y+5, r22	; 0x05
    1c9a:	7e 83       	std	Y+6, r23	; 0x06
    1c9c:	8f 83       	std	Y+7, r24	; 0x07
    1c9e:	98 87       	std	Y+8, r25	; 0x08
	for(s32 L_s32Number = 0;L_s32Number < A_s32Number;L_s32Number++)
    1ca0:	19 82       	std	Y+1, r1	; 0x01
    1ca2:	1a 82       	std	Y+2, r1	; 0x02
    1ca4:	1b 82       	std	Y+3, r1	; 0x03
    1ca6:	1c 82       	std	Y+4, r1	; 0x04
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <HLCD_vPrintNumber+0x3c>
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	ab 81       	ldd	r26, Y+3	; 0x03
    1cb0:	bc 81       	ldd	r27, Y+4	; 0x04
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	b1 1d       	adc	r27, r1
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	ab 83       	std	Y+3, r26	; 0x03
    1cbe:	bc 83       	std	Y+4, r27	; 0x04
    1cc0:	29 81       	ldd	r18, Y+1	; 0x01
    1cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cc4:	4b 81       	ldd	r20, Y+3	; 0x03
    1cc6:	5c 81       	ldd	r21, Y+4	; 0x04
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	af 81       	ldd	r26, Y+7	; 0x07
    1cce:	b8 85       	ldd	r27, Y+8	; 0x08
    1cd0:	28 17       	cp	r18, r24
    1cd2:	39 07       	cpc	r19, r25
    1cd4:	4a 07       	cpc	r20, r26
    1cd6:	5b 07       	cpc	r21, r27
    1cd8:	44 f3       	brlt	.-48     	; 0x1caa <HLCD_vPrintNumber+0x26>
	{


	}

}
    1cda:	28 96       	adiw	r28, 0x08	; 8
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <HLCD_vSetCursorPosition>:
void HLCD_vSetCursorPosition(u8 A_u8LinePostion,u8 A_u8LineNo)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <HLCD_vSetCursorPosition+0x6>
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	6a 83       	std	Y+2, r22	; 0x02

}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <HLCD_vSaveCustomChar>:
void HLCD_vSaveCustomChar(/* TODO: to be provided */)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62

}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <HLCD_vDisplayCustomChar>:
void HLCD_vDisplayCustomChar(/* TODO: to be done */)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62

}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <KPD_vInit>:
#include "KPD_int.h"
#include <util/delay.h>


void KPD_vInit(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDir(KPD_PORT, 0x0f);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	6f e0       	ldi	r22, 0x0F	; 15
    1d2c:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_vSetPortDir>
	DIO_vSetPortVal(KPD_PORT, 0xff);
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	6f ef       	ldi	r22, 0xFF	; 255
    1d34:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_vSetPortVal>
}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <KPD_u8GetPressedKey>:
u8 KPD_u8GetPressedKey(void)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	61 97       	sbiw	r28, 0x11	; 17
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key = 0;  // default value if nothing pressed
    1d52:	19 8a       	std	Y+17, r1	; 0x11
	for(u8 L_u8Col=0; L_u8Col<4 ;L_u8Col++)
    1d54:	18 8a       	std	Y+16, r1	; 0x10
    1d56:	a6 c0       	rjmp	.+332    	; 0x1ea4 <KPD_u8GetPressedKey+0x166>
	{
		// activate current column
		DIO_vSetPinVal(KPD_PORT,L_u8Col,DIO_LOW);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	68 89       	ldd	r22, Y+16	; 0x10
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>

		for(u8 L_u8Row=0;L_u8Row<4;L_u8Row++)
    1d62:	1f 86       	std	Y+15, r1	; 0x0f
    1d64:	93 c0       	rjmp	.+294    	; 0x1e8c <KPD_u8GetPressedKey+0x14e>
		{
			if(DIO_u8GetPinVal(KPD_PORT,L_u8Row+4) == 0)  // a button is pressed
    1d66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d68:	98 2f       	mov	r25, r24
    1d6a:	9c 5f       	subi	r25, 0xFC	; 252
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	69 2f       	mov	r22, r25
    1d70:	0e 94 9b 07 	call	0xf36	; 0xf36 <DIO_u8GetPinVal>
    1d74:	88 23       	and	r24, r24
    1d76:	61 f4       	brne	.+24     	; 0x1d90 <KPD_u8GetPressedKey+0x52>
			{
				pressed_key = L_u8Row + (L_u8Col*4) +1;  // key number
    1d78:	88 89       	ldd	r24, Y+16	; 0x10
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	98 2f       	mov	r25, r24
    1d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8a:	89 0f       	add	r24, r25
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	89 8b       	std	Y+17, r24	; 0x11
			}
			while(DIO_u8GetPinVal(KPD_PORT,L_u8Row+4) == 0){}
    1d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d92:	98 2f       	mov	r25, r24
    1d94:	9c 5f       	subi	r25, 0xFC	; 252
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	69 2f       	mov	r22, r25
    1d9a:	0e 94 9b 07 	call	0xf36	; 0xf36 <DIO_u8GetPinVal>
    1d9e:	88 23       	and	r24, r24
    1da0:	b9 f3       	breq	.-18     	; 0x1d90 <KPD_u8GetPressedKey+0x52>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 e2       	ldi	r26, 0x20	; 32
    1da8:	b1 e4       	ldi	r27, 0x41	; 65
    1daa:	8b 87       	std	Y+11, r24	; 0x0b
    1dac:	9c 87       	std	Y+12, r25	; 0x0c
    1dae:	ad 87       	std	Y+13, r26	; 0x0d
    1db0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8f 83       	std	Y+7, r24	; 0x07
    1dcc:	98 87       	std	Y+8, r25	; 0x08
    1dce:	a9 87       	std	Y+9, r26	; 0x09
    1dd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <KPD_u8GetPressedKey+0xb6>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <KPD_u8GetPressedKey+0x134>
	else if (__tmp > 65535)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <KPD_u8GetPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <KPD_u8GetPressedKey+0x116>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <KPD_u8GetPressedKey+0x104>
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <KPD_u8GetPressedKey+0xf8>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <KPD_u8GetPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <KPD_u8GetPressedKey+0x140>
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
	for(u8 L_u8Col=0; L_u8Col<4 ;L_u8Col++)
	{
		// activate current column
		DIO_vSetPinVal(KPD_PORT,L_u8Col,DIO_LOW);

		for(u8 L_u8Row=0;L_u8Row<4;L_u8Row++)
    1e86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	8f 87       	std	Y+15, r24	; 0x0f
    1e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8e:	84 30       	cpi	r24, 0x04	; 4
    1e90:	08 f4       	brcc	.+2      	; 0x1e94 <KPD_u8GetPressedKey+0x156>
    1e92:	69 cf       	rjmp	.-302    	; 0x1d66 <KPD_u8GetPressedKey+0x28>
			while(DIO_u8GetPinVal(KPD_PORT,L_u8Row+4) == 0){}
			_delay_ms(10);

		}
		// deactivate column
		DIO_vSetPinVal(KPD_PORT,L_u8Col,DIO_HIGH);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	68 89       	ldd	r22, Y+16	; 0x10
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_vSetPinVal>
	DIO_vSetPortVal(KPD_PORT, 0xff);
}
u8 KPD_u8GetPressedKey(void)
{
	u8 pressed_key = 0;  // default value if nothing pressed
	for(u8 L_u8Col=0; L_u8Col<4 ;L_u8Col++)
    1e9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ea0:	8f 5f       	subi	r24, 0xFF	; 255
    1ea2:	88 8b       	std	Y+16, r24	; 0x10
    1ea4:	88 89       	ldd	r24, Y+16	; 0x10
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	08 f4       	brcc	.+2      	; 0x1eac <KPD_u8GetPressedKey+0x16e>
    1eaa:	56 cf       	rjmp	.-340    	; 0x1d58 <KPD_u8GetPressedKey+0x1a>
		}
		// deactivate column
		DIO_vSetPinVal(KPD_PORT,L_u8Col,DIO_HIGH);
	}

	return pressed_key;
    1eac:	89 89       	ldd	r24, Y+17	; 0x11
}
    1eae:	61 96       	adiw	r28, 0x11	; 17
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <main>:
#include "../MCAL/DIO/DIO_int.h"
#include "../HAL/LCD/LCD_int.h"
#include "../MCAL/ADC/ADC_int.h"

int main (void)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	60 97       	sbiw	r28, 0x10	; 16
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
   MADC_vInit();
    1ed4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <MADC_vInit>
   HLCD_vInit();
    1ed8:	0e 94 94 0b 	call	0x1728	; 0x1728 <HLCD_vInit>
   u16 adc_value = 0;
    1edc:	18 8a       	std	Y+16, r1	; 0x10
    1ede:	1f 86       	std	Y+15, r1	; 0x0f


	while(1)
	{
		adc_value = MADC_u16AnalogRead(0);
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	0e 94 12 09 	call	0x1224	; 0x1224 <MADC_u16AnalogRead>
    1ee6:	98 8b       	std	Y+16, r25	; 0x10
    1ee8:	8f 87       	std	Y+15, r24	; 0x0f
		HLCD_vSendCommand(LCD_CLEAR);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	0e 94 74 09 	call	0x12e8	; 0x12e8 <HLCD_vSendCommand>
		HLCD_vSendData(adc_value);
    1ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef2:	0e 94 84 0a 	call	0x1508	; 0x1508 <HLCD_vSendData>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	aa e7       	ldi	r26, 0x7A	; 122
    1efc:	b3 e4       	ldi	r27, 0x43	; 67
    1efe:	8b 87       	std	Y+11, r24	; 0x0b
    1f00:	9c 87       	std	Y+12, r25	; 0x0c
    1f02:	ad 87       	std	Y+13, r26	; 0x0d
    1f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a ef       	ldi	r20, 0xFA	; 250
    1f14:	54 e4       	ldi	r21, 0x44	; 68
    1f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	8f 83       	std	Y+7, r24	; 0x07
    1f20:	98 87       	std	Y+8, r25	; 0x08
    1f22:	a9 87       	std	Y+9, r26	; 0x09
    1f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f26:	6f 81       	ldd	r22, Y+7	; 0x07
    1f28:	78 85       	ldd	r23, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <main+0x88>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <main+0x106>
	else if (__tmp > 65535)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	4c f5       	brge	.+82     	; 0x1fb2 <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e2       	ldi	r20, 0x20	; 32
    1f6e:	51 e4       	ldi	r21, 0x41	; 65
    1f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <main+0xe8>
    1f8a:	88 ec       	ldi	r24, 0xC8	; 200
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <main+0xd6>
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <main+0xca>
    1fb0:	97 cf       	rjmp	.-210    	; 0x1ee0 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <main+0x112>
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	82 cf       	rjmp	.-252    	; 0x1ee0 <main+0x20>

00001fdc <__prologue_saves__>:
    1fdc:	2f 92       	push	r2
    1fde:	3f 92       	push	r3
    1fe0:	4f 92       	push	r4
    1fe2:	5f 92       	push	r5
    1fe4:	6f 92       	push	r6
    1fe6:	7f 92       	push	r7
    1fe8:	8f 92       	push	r8
    1fea:	9f 92       	push	r9
    1fec:	af 92       	push	r10
    1fee:	bf 92       	push	r11
    1ff0:	cf 92       	push	r12
    1ff2:	df 92       	push	r13
    1ff4:	ef 92       	push	r14
    1ff6:	ff 92       	push	r15
    1ff8:	0f 93       	push	r16
    1ffa:	1f 93       	push	r17
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	ca 1b       	sub	r28, r26
    2006:	db 0b       	sbc	r29, r27
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	09 94       	ijmp

00002014 <__epilogue_restores__>:
    2014:	2a 88       	ldd	r2, Y+18	; 0x12
    2016:	39 88       	ldd	r3, Y+17	; 0x11
    2018:	48 88       	ldd	r4, Y+16	; 0x10
    201a:	5f 84       	ldd	r5, Y+15	; 0x0f
    201c:	6e 84       	ldd	r6, Y+14	; 0x0e
    201e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2020:	8c 84       	ldd	r8, Y+12	; 0x0c
    2022:	9b 84       	ldd	r9, Y+11	; 0x0b
    2024:	aa 84       	ldd	r10, Y+10	; 0x0a
    2026:	b9 84       	ldd	r11, Y+9	; 0x09
    2028:	c8 84       	ldd	r12, Y+8	; 0x08
    202a:	df 80       	ldd	r13, Y+7	; 0x07
    202c:	ee 80       	ldd	r14, Y+6	; 0x06
    202e:	fd 80       	ldd	r15, Y+5	; 0x05
    2030:	0c 81       	ldd	r16, Y+4	; 0x04
    2032:	1b 81       	ldd	r17, Y+3	; 0x03
    2034:	aa 81       	ldd	r26, Y+2	; 0x02
    2036:	b9 81       	ldd	r27, Y+1	; 0x01
    2038:	ce 0f       	add	r28, r30
    203a:	d1 1d       	adc	r29, r1
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	ed 01       	movw	r28, r26
    2048:	08 95       	ret

0000204a <_exit>:
    204a:	f8 94       	cli

0000204c <__stop_program>:
    204c:	ff cf       	rjmp	.-2      	; 0x204c <__stop_program>
